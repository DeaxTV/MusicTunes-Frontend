import { c as x, a as P, v as u, k as H } from "../../../chunks/index.js"; import { L as v } from "../../../chunks/ListItem.js"; import { M as w } from "../../../chunks/musicResponsiveListItemRenderer.js"; import { m as D, F as $, l as m, B as E } from "../../../chunks/utils.js"; import { I as B } from "../../../chunks/InfoBox.js"; import { p as L } from "../../../chunks/stores.js"; import { H as S } from "../../../chunks/Header.js"; import { C, r as _ } from "../../../chunks/contexts.js"; function A(e) { const r = e.contents?.singleColumnBrowseResultsRenderer?.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].musicShelfRenderer.contents || [], i = D(r, ({ musicResponsiveListItemRenderer: a }, n) => ({ ...w({ musicResponsiveListItemRenderer: a }), index: n })), l = (() => { console.log(e.header.musicDetailHeaderRenderer.subtitle.runs); const a = e.header?.musicDetailHeaderRenderer?.subtitle?.runs.at(-1), n = e.header?.musicDetailHeaderRenderer?.subtitle?.runs[0], o = $(e.header?.musicDetailHeaderRenderer?.subtitle?.runs, s => !!s?.navigationEndpoint?.browseEndpoint?.browseId).map(s => ({ name: s.text, channelId: s?.navigationEndpoint?.browseEndpoint?.browseId || "" })); return { playlistId: e.header?.musicDetailHeaderRenderer.menu?.menuRenderer?.topLevelButtons[0].buttonRenderer.navigationEndpoint.watchPlaylistEndpoint.playlistId, subtitles: [{ year: a.text, tracks: e.header?.musicDetailHeaderRenderer?.secondSubtitle?.runs[0].text, length: e.header?.musicDetailHeaderRenderer?.secondSubtitle?.runs[2]?.text, type: n.text, contentRating: !!e.header?.musicDetailHeaderRenderer?.hasOwnProperty("subtitleBadges") }], secondSubtitle: [], artist: o, thumbnails: e.header?.musicDetailHeaderRenderer?.thumbnail?.croppedSquareThumbnailRenderer?.thumbnail?.thumbnails, title: e.header?.musicDetailHeaderRenderer.title?.runs[0].text, autoMixId: e.header?.musicDetailHeaderRenderer.menu?.menuRenderer?.items[1]?.menuNavigationItemRenderer?.navigationEndpoint?.watchPlaylistEndpoint?.playlistId || null } })(); return { items: i, releaseInfo: l } } const j = x((e, r, i, b) => {
	let l, a; a = P(L, d => l = d); let { data: n } = r, { data: o, id: s, path: h } = n; const I = A(o); let { items: R, releaseInfo: t } = I; const c = () => E.add(s), y = () => { c(), m.initPlaylistSession({ playlistId: t.playlistId, index: 0 }), m.updatePosition(0) }, g = () => { c(), m.initPlaylistSession({ playlistId: t?.autoMixId, params: "wAEB", index: 0 }) }; let p = t?.thumbnails[0]?.url.replace(/=(w(\d+))-(h(\d+))/g, "=w512-h512"); return C.set({ parentPlaylistId: t.playlistId, page: "release" }), _.set({ page: "release" }), r.data === void 0 && i.data && n !== void 0 && i.data(n), s = l.url.searchParams.get("id"), a(), `${u(S, "Header").$$render(e, { title: t.title, desc: `${t.title} by ${t?.artist[0]?.name} on MusicTunes`, url: h + `?id=${s}`, image: p }, {}, {})}
<main data-testid="release">${u(B, "InfoBox").$$render(e, { thumbnail: p, buttons: [{ text: "Play Album", action: () => y(), icon: "play" }, { text: "Album Radio", action: () => g(), icon: "play" }, { icon: "dots", type: "icon" }], title: t.title, artist: t.artist, subtitles: t.subtitles, type: "release" }, {}, {})}
	${H(R, (d, f) => `${u(v, "ListItem").$$render(e, { item: d, idx: f }, {}, {})}`)}</main>

`}); export { j as default };

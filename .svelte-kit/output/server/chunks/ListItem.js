import { c as q, a as n, o as j, x as E, v as R, j as m, h as y, k as C, t as Q } from "./index.js"; import { d as D, l as g, c as F, h as B, B as U, j as V, s as k, C as h } from "./utils.js"; import { p as N } from "./stores.js"; import { I as Y } from "./Icon.js"; import { P as O, g as z } from "./PopperButton.js"; import { s as H } from "./service.js"; import { C as W } from "./contexts.js"; import { S as X } from "./url.js"; const J = { "View Artist": () => ({ text: "View Artist", icon: "artist" }), "Add to Queue": () => ({ text: "Add to Queue", icon: "queue" }), "Play Next": () => ({ text: "Play Next", icon: "queue" }), Favorite: () => ({ text: "Favorite", icon: "heart" }), "Start Group Session": () => ({ text: "Start Group Session", icon: "users" }), Share: () => ({ text: "Share", icon: "share" }), "Go to Album": () => ({ text: "Go to Album", icon: "album" }), "Invite Group Session": () => ({ text: "Invite Group Session", icon: "send" }), "View Playlist": () => ({ text: "View Playlist", icon: "list" }), "Play Song Radio": () => ({ text: "Play Song Radio", icon: "radio" }), "Remove From Playlist": () => ({ text: "Remove From Playlist", icon: "x" }), "Add to Playlist": () => ({ text: "Add to Playlist", icon: "list-plus" }), "Add to Favorites": () => ({ text: "Add to Favorites", icon: "heart" }), "Share Group Session": () => ({ text: "Share Group Session", icon: "share" }), Shuffle: () => ({ text: "Shuffle", icon: "shuffle" }), "Shuffle Playlist": () => ({ text: "Shuffle Playlist", icon: "shuffle" }), "Album Radio": () => ({ text: "Album Radio", icon: "album" }), "Edit Playlist": () => ({ icon: "edit", text: "Edit Playlist" }), "Remove from Queue": () => ({ icon: "x", text: "Remove from Queue" }) }; function K() { const e = []; return { add: function (...l) { const [s, r] = l; if (!s && !r) return this; const a = J[s](); return a.action = r, e.push(a), this }, build: function () { return e } } } const Z = { code: '.m-item.svelte-m8ocey.svelte-m8ocey{align-content:center;cursor:pointer;display:flex;height:5.25em;justify-content:space-between;line-height:1.5;padding:0 1em;touch-action:auto}@media screen and (min-width:720px){.m-item.svelte-m8ocey.svelte-m8ocey{align-content:center;display:grid;flex:none;grid-template-areas:"left middle right";grid-template-columns:2.25em calc(100% - 4.8em) 2.45em}}@supports (content-visibility:auto){.m-item.svelte-m8ocey.svelte-m8ocey{content-visibility:auto}}.isPlaying.svelte-m8ocey.svelte-m8ocey{background:hsla(240,0%,57%,.192)}.index.svelte-m8ocey.svelte-m8ocey{display:none;visibility:none}@media screen and (min-width:720px){.index.svelte-m8ocey.svelte-m8ocey{display:grid;font-weight:600;grid-area:left;justify-items:center;opacity:1;place-self:center;pointer-events:none;text-align:center;visibility:visible;white-space:nowrap;width:1.5em}}.title.svelte-m8ocey.svelte-m8ocey{display:block;font-weight:400;max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media screen and (min-width:720px){.title.svelte-m8ocey.svelte-m8ocey{max-width:calc(100% - .2em)}}.metadata.svelte-m8ocey.svelte-m8ocey{align-items:center;align-self:center;flex-direction:row;gap:.875em;grid-area:middle;max-width:calc(100% - 3em)}.column.svelte-m8ocey.svelte-m8ocey,.metadata.svelte-m8ocey.svelte-m8ocey{display:flex;width:100%}.column.svelte-m8ocey.svelte-m8ocey{flex-direction:column;justify-content:center;max-width:calc(100% - 4.45em)}.artists.svelte-m8ocey.svelte-m8ocey{-webkit-line-clamp:2;-webkit-box-orient:vertical;line-clamp:2;display:-webkit-box;font-family:CommissionerVariable,sans-serif;overflow:hidden}.artists.svelte-m8ocey span.svelte-m8ocey,.artists.svelte-m8ocey>a.svelte-m8ocey{color:#d4d4d4}.length.svelte-m8ocey.svelte-m8ocey{align-self:center;grid-area:right;width:2.45em}.thumbnail.svelte-m8ocey.svelte-m8ocey{aspect-ratio:1/1;border-radius:var(--xs-radius);max-height:4.25em;max-width:4.25em;min-height:4.25em;min-width:4.25em}@media screen and (min-width:720px){.thumbnail.svelte-m8ocey.svelte-m8ocey{margin-left:1em}}img.svelte-m8ocey.svelte-m8ocey{aspect-ratio:1/1;border-radius:var(--xs-radius);height:100%;-o-object-fit:contain;object-fit:contain;position:relative;width:100%}img.svelte-m8ocey.svelte-m8ocey:before{content:"";display:block;padding-top:66.6666666667%}', map: null }, ee = ({ item: e, idx: l, SITE_ORIGIN_URL: s, dispatch: r, page: a }) => K().add("View Artist", async () => { z(`/artist/${e?.artistInfo ? e.artistInfo.artist[0].browseId : e?.subtitle[0].browseId}`), await Q(), window.scrollTo({ behavior: "smooth", top: 0, left: 0 }) }).add("Play Song Radio", async () => { console.log(e), g.initAutoMixSession({ videoId: e.videoId, loggingContext: e?.loggingContext }) }).add("Add to Playlist", async () => { if (e.endpoint?.pageType.match(/PLAYLIST|ALBUM|SINGLE/)) { const u = await (await fetch("/api/v1/get_queue.json?playlistId=" + e.playlistId)).json(); k.set({ state: !0, item: [...u] }) } else k.set({ state: !0, item: e }); r("change") }).add("Favorite", () => { H.sendMessage("create", "favorite", e) }).add(a === "queue" ? "Remove from Queue" : null, a === "queue" ? () => { g.removeTrack(l) } : null).add("Share", async () => { let o = { title: e.title, url: `${s}/listen?id=${e.videoId}` }; e.endpoint?.pageType?.includes("MUSIC_PAGE_TYPE_PLAYLIST") && (o = { title: e.title, url: `${s}/playlist/${e.endpoint?.browseId}` }), e.endpoint?.pageType?.includes("MUSIC_PAGE_TYPE_ALBUM") && (o = { title: e.title, url: `${s}/release?id=${e.endpoint?.browseId}` }), e.endpoint?.pageType?.includes("MUSIC_PAGE_TYPE_ARTIST") && (o = { title: e.title, text: `${e.title} on MusicTunes`, url: `${s}/artist/${e.endpoint?.browseId}` }); try { navigator.canShare ? (await navigator.share(o), h("Shared successfully", "success")) : (await navigator.clipboard.writeText(o.url), h("Link copied successfully", "success")) } catch (c) { h("Error: " + c, "error") } }).build(), me = q((e, l, s, r) => {
	let a, o, c, u, b, f, x, $, w, P, I, S, _, A, T, M; c = n(D, t => o = t), u = n(g, t => t), f = n(X, t => b = t), $ = n(F, t => x = t), P = n(B, t => w = t), S = n(N, t => I = t), A = n(U, t => _ = t), M = n(V, t => T = t); let { item: i } = l, { idx: d } = l; const G = j(), { page: v, parentPlaylistId: te = null, visitorData: ie } = W.get(); let p = !1; const L = ee({ item: i, idx: d, SITE_ORIGIN_URL: b, dispatch: G, page: v }); return l.item === void 0 && s.item && i !== void 0 && s.item(i), l.idx === void 0 && s.idx && d !== void 0 && s.idx(d), e.css.add(Z), a = (v !== "queue" && v !== "release" ? _.has(I.params.slug) : !0) && o.length > 0 && w === d && x.videoId === i.videoId, c(), u(), f(), $(), P(), S(), A(), M(), `





<article class="${["m-item svelte-m8ocey", a ? "isPlaying" : ""].join(" ").trim()}" tabindex="0"><div class="index svelte-m8ocey"><span${E((a !== !0 && p !== !0 ? "hidden" : "").trim())}>
			${R(Y, "Icon").$$render(e, { name: "play", color: "inherit", size: "1.5em" }, {}, {})}</span>
		<span${E((a !== !1 || p !== !1 ? "hidden" : "").trim())}>${m(d + 1)}</span></div>
	<div class="metadata svelte-m8ocey">${i.thumbnails.length !== 0 ? `<div class="thumbnail svelte-m8ocey"><img decoding="async" loading="lazy"${y("src", i.thumbnails[0]?.url, 0)}${y("width", i.thumbnails[0]?.width, 0)}${y("height", i.thumbnails[0]?.height, 0)} alt="thumbnail" class="svelte-m8ocey"></div>` : ""}
		<div class="column svelte-m8ocey"><span class="title svelte-m8ocey">${m(i.title)}
				${i?.explicit ? '<span class="explicit"><span class="sr-only">Explicit</span></span>' : ""}</span>
			<div class="artists secondary svelte-m8ocey">${Array.isArray(i.subtitle) ? `${C(i.subtitle, t => `${t?.browseId ? `<a class="artist secondary svelte-m8ocey"${y("href", `/artist/${t.browseId}`, 0)}>${m(t.text)}</a>` : `<span class="svelte-m8ocey">${m(t.text)} </span>`}`)}` : ""}</div></div></div>
	${T || p ? `<div class="length svelte-m8ocey" tabindex="0">${R(O, "PopperButton").$$render(e, { tabindex: 0, items: L }, {}, {})}</div>` : `<span class="${["length svelte-m8ocey", i?.length ? "" : "hidden"].join(" ").trim()}">${m((i?.length?.text ?? i.length) || "")}</span>`}
</article>`}); export { me as L, K as b };

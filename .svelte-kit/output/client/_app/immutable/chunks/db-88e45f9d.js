var p = Object.defineProperty; var A = (e, s, t) => s in e ? p(e, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[s] = t; var d = (e, s, t) => (A(e, typeof s != "symbol" ? s + "" : s, t), t); const w = typeof globalThis < "u"; function g(e, s) { const t = e.length; let r = -1; for (; ++r < t;)s(e[r], r, e); r = null } function b(e, s) { let t = -1, r = 0; const a = [], l = e.length; for (; ++t < l;)s(e[t]) && (a[r] = e[t], r++); return a } class P { constructor(s, t = 1) { d(this, "$$"); this.DB_NAME = s, this.DB_VER = t } init() { this.$$ || (this.$$ = new Promise((s, t) => { const r = indexedDB.open(this.DB_NAME, this.DB_VER); r.onerror = () => t(r.error), r.onsuccess = () => s(r.result), r.onupgradeneeded = () => { if (r.result.objectStoreNames.contains("playlists")) { const a = r.transaction.objectStore("playlists").getAll(); a.onsuccess = l => { Array.isArray(l.target.result) && (u.playlists = [...l.target.result], r.result.deleteObjectStore("playlists")), r.result.createObjectStore("playlists", { keyPath: "id" }) } } r.result.objectStoreNames.contains("favorites") || r.result.createObjectStore("favorites", { keyPath: "videoId" }), r.result.objectStoreNames.contains("playlists") || r.result.createObjectStore("playlists", { keyPath: "id" }) } })) } transaction(s, t, r) { if (w) return this.init(), this.$$.then(a => new Promise((l, n) => { const o = a.transaction(s, t); o.oncomplete = () => l(), o.onabort = o.onerror = () => n(o.error), r(o.objectStore(s)) })) } } const u = {}, h = { normal: "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict", alternative: "useandom26T198340PX75pxJACKVERYMINDBUSHWOLFGQZbfghjklqvwyzrict" }, S = { generate: (e = 16, s = "normal") => { let t = "", r = e; for (; r--;)t += h[s][Math.random() * h[s].length | 0]; return t } }; function j(e = 16, s = "normal") { return S.generate(e, s) } const c = new P("MusicTunes", 3); function I(e) { if (!(Array.isArray(e) && !e.length)) return new Promise(s => c.transaction("favorites", "readwrite", t => { try { g(e, r => t.put(r)), t.transaction.oncomplete = () => { s({ message: "Added items to favorites!" }) }, t.transaction.onerror = () => { s({ message: "Error adding items to favorites. Reason: " + t.transaction.error }) } } catch (r) { s({ message: "Error adding items to favorites. Reason: " + r }) } })) } function R(e = []) { if (!(Array.isArray(e) && !e.length)) return new Promise(s => c.transaction("playlists", "readwrite", t => { try { g(e, r => t.put(r)), t.transaction.oncomplete = () => { s({ message: `Added ${e.length} new playlists!` }) }, t.transaction.onerror = () => { s({ message: "Error creating new playlists. Reason: " + t.transaction.error }) } } catch (r) { s({ message: "Error creating new playlists. Reason: " + r }) } })) } function D(e, s) { return new Promise(t => c.transaction("playlists", "readwrite", r => { try { const a = r.openCursor(e); a.onsuccess = l => { const n = l.target.result; if (n) { const o = n.value, y = n.update({ ...o, length: o.length--, items: b(o.items, i => i.videoId && i.videoId !== s) || [] }); y.onsuccess = () => { t({ message: "Removed song from playlist!" }) } } } } catch (a) { t({ message: "Error: " + a }) } })) } function $() { return new Promise(e => c.transaction("favorites", "readwrite", s => { try { const t = s.getAll(); t.onsuccess = r => { var a; Array.isArray((a = r == null ? void 0 : r.target) == null ? void 0 : a.result) && e({ data: r.target.result }) } } catch (t) { e({ message: t }) } })) } function B() { return new Promise(e => { c.transaction("playlists", "readwrite", s => { try { u.playlists && Array.isArray(u.playlists) && g(u.playlists, r => { s.put(r) }); const t = s.getAll(); t.onsuccess = r => { var l; let a = []; Array.isArray((l = r == null ? void 0 : r.target) == null ? void 0 : l.result) && (a = r.target.result, g(a, (n, o) => { if (n.id || (a[o].id = j(32), s.put({ ...a[o] })), Array.isArray(n == null ? void 0 : n.items) && (n == null ? void 0 : n.items.length) !== 0) { let i = n == null ? void 0 : n.items.length; for (; i--;)if (Array.isArray(n == null ? void 0 : n.items[i])) { const f = n == null ? void 0 : n.items[i]; a[o].items.splice(i, 1), a[o].items = [...a[o].items, ...f].flat() } a[o].length = (n == null ? void 0 : n.items.length) ?? (n == null ? void 0 : n.length), s.put({ ...a[o] }) } }), e({ data: a })) } } catch (t) { console.error(t), e({ message: t }) } }) }) } export { $ as a, I as b, D as d, B as g, R as s };
